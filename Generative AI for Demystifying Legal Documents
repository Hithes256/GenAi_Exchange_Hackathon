!pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib transformers torch gradio

# Step 1: Imports
import os, pickle, re
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from transformers import pipeline
import gradio as gr

# Google Docs API scope
SCOPES = ['https://www.googleapis.com/auth/documents.readonly']

# Step 2: Authenticate
def get_creds():
    creds = None
    if os.path.exists('token.pkl'):
        with open('token.pkl', 'rb') as f:
            creds = pickle.load(f)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        with open('token.pkl', 'wb') as f:
            pickle.dump(creds, f)
    return creds

def extract_doc_text(doc_id):
    creds = get_creds()
    service = build('docs', 'v1', credentials=creds)
    doc = service.documents().get(documentId=doc_id).execute()
    content = doc.get('body').get('content')
    text = ''
    for elem in content:
        if 'paragraph' in elem:
            for run in elem['paragraph']['elements']:
                if 'textRun' in run:
                    text += run['textRun']['content']
    return text.strip()

# Step 3: Summarizer
summarizer = pipeline("summarization", model="sshleifer/distilbart-cnn-12-6")

def chunk_text(text, max_chars=1000):
    chunks, start = [], 0
    while start < len(text):
        end = min(len(text), start + max_chars)
        if end < len(text):
            p = text.rfind('.', start, end)
            if p > start:
                end = p+1
        chunks.append(text[start:end].strip())
        start = end
    return chunks

def summarize_text(text):
    chunks = chunk_text(text)
    outs = []
    for c in chunks:
        out = summarizer(c, max_length=120, min_length=30, do_sample=False)
        outs.append(out[0]['summary_text'])
    return " ".join(outs)

# Step 4: Risk detection
RISK_KEYWORDS = ["penalt","fine","fee","terminate","termination","indemnif","liabilit",
                 "charge","forfeit","auto-renew","automatic renewal","interest","breach","late","deposit"]

def find_risks(text):
    sents = re.split(r'(?<=[.!?])\s+', text)
    flagged = [s.strip() for s in sents if any(k in s.lower() for k in RISK_KEYWORDS)]
    amounts = re.findall(r"\bRs\.?\s?[0-9,]+|INR\s?[0-9,]+|[0-9,]+(?:\.\d+)?\s?(?:%|percent)\b", text, flags=re.I)
    return flagged, list(dict.fromkeys(amounts))

# Step 5: Q&A pipeline
qa_pipeline = pipeline(
    "question-answering",
    model="distilbert-base-cased-distilled-squad",
    tokenizer="distilbert-base-cased-distilled-squad"
)


def answer_question(text, question):
    if not text.strip():
        return "Document text is empty. Cannot answer questions."
    try:
        res = qa_pipeline(question=question, context=text)
        return res['answer']
    except Exception as e:
        return f"Error: {str(e)}"

# Step 6: Wrap everything
def analyze_doc(doc_id, question=None):
    try:
        text = extract_doc_text(doc_id)
        summary = summarize_text(text)
        flagged, amounts = find_risks(text)

        result = f"📑 Summary:\n{summary}\n\n"
        result += "⚠ Risky Clauses Detected:\n"
        if flagged:
            result += "\n".join(["- " + f for f in flagged])
        else:
            result += "None found."
        result += "\n\n💰 Amounts/Percentages Mentioned: " + (", ".join(amounts) if amounts else "None")

        if question:
            answer = answer_question(text, question)
            result += f"\n\n❓ Answer to your question: {answer}"

        return result
    except Exception as e:
        return f"❌ Error: {str(e)}"

# Step 7: Gradio UI
with gr.Blocks() as demo:
    gr.Markdown("# 📜 Legal Document Analyzer + Q&A")
    gr.Markdown("Enter Google Docs ID and optionally ask a question about the document.")

    doc_id_input = gr.Textbox(label="Google Doc ID", placeholder="Enter Google Doc ID here...")
    question_input = gr.Textbox(label="Ask a Question (optional)", placeholder="Enter your question here...")
    output = gr.Textbox(label="Analysis Result", lines=20)

    analyze_btn = gr.Button("🔍 Analyze Document")
    analyze_btn.click(fn=analyze_doc, inputs=[doc_id_input, question_input], outputs=output)

demo.launch(share=True)
